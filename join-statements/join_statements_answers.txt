1. How do you find related data held in two separate data tables?

  You use a JOIN statement.

2. Explain, in your own words, the difference between an INNER JOIN, LEFT OUTER JOIN, and RIGHT OUTER JOIN. 
Give a real-world example for each.

  INNER JOIN only shows only matching data from both tables.
  For example, an employee may have a table for personal data and another table for work assigned to him using his id.
  INNER JOIN could be used to match the names of the employees with the work they are assigned.

  LEFT OUTER JOIN shows all the data for Table A and only yhe matching data for table B, with a NULL to fill in blanks.
  For example, this could be used to list all employees, including ones not assigned work.

  RIGHT OUTER JOIN shows all th edata for Table B and only the matching data for table A, with a NULL to fill in blanks.
  For example, could be used to show all assignments, including the ones that arent assigned yet.

3. Define primary key and foreign key. Give a real-world example for each.

  Primary key would be the key native to the table, whereas foreign key would be a key listed in a table that is for 
  another table.

  For example, for a table of employees, the employee_id would be the primary key, but in the assignments table it would be the foreign key,
  since it is used to match with data in another table. The assignments table might also have its own primary key for each assignment.

4. Define aliasing.

  Aliasing is assigning shortened nicknames to tables, to keep things short.

5. Change this query so that you are using aliasing:

  SELECT p.name, c.salary, c.vacation_days 
  FROM professor AS p
  JOIN compensation AS c
  ON p.id = c.professor_id;

6. Why would you use a NATURAL JOIN? Give a real-world example.

    NATURAL JOIN is used to join two tables that have columns with the same names. The columns are made into one column and the data from both tables 
    are matched up.

    For example, a table with employee data and a table with assignments assigned to employees using their id. Both tables have a column
    called employee_id, which for a natural join, will match up all the assignments with the employees using the ids in those columns.

7. Using this Employee schema and data, write queries to find the following information:
  List all employees and all shifts.

    SELECT employees.*, shifts.*
    FROM employees
    FULL OUTER JOIN scheduled_shifts
    ON scheduled_shifts.employee_id = employees.id
    FULL OUTER JOIN shifts
    ON scheduled_shifts.shift_id = shifts.id;

8. Using this Adoption schema and data, please write queries to retrieve the following information and include the results:

  Create a list of all volunteers. If the volunteer is fostering a dog, include each dog as well.

    SELECT *
    FROM volunteers
    LEFT JOIN dogs
    ON dogs.id = volunteers.foster_dog_id;

  The cat's name, adopter's name, and adopted date for each cat adopted within the past month to be displayed as part of the 
  "Happy Tail" social media promotion which posts recent successful adoptions.

    SELECT cats.name, a.first_name, a.last_name, ca.date
    FROM cats
    JOIN cat_adoptions AS ca ON cats.id = ca.cat_id
    JOIN adopters AS a ON a.id = ca.adopter_id;

  Create a list of adopters who have not yet chosen a dog to adopt.

    SELECT adopters.*
    FROM adopters
    LEFT JOIN dog_adoptions
    ON adopters.id = dog_adoptions.adopter_id
    WHERE dog_adoptions.adopter_id IS NULL;

  Lists of all cats and all dogs who have not been adopted.

    SELECT dogs.*
    FROM dogs
    LEFT JOIN dog_adoptions
    ON dogs.id = dog_adoptions.dog_id
    WHERE dog_adoptions.dog_id IS NULL;

    SELECT cats.*
    FROM cats
    LEFT JOIN cat_adoptions
    ON cats.id = cat_adoptions.cat_id
    WHERE cat_adoptions.cat_id IS NULL;

  The name of the person who adopted Rosco.

    SELECT a.first_name, a.last_name
    FROM dogs
    JOIN dog_adoptions AS dog ON dogs.id = dog.dog_id
    JOIN adopters AS a ON a.id = dog.adopter_id
    WHERE dogs.name = 'Rosco';


9. Using this Library schema and data, write queries applying the following scenarios and include the results:

  To determine if the library should buy more copies of a given book, please provide the names and position, in order, of all of the 
  patrons with a hold (request for a book with all copies checked out) on "Advanced Potion-Making".

    SELECT patrons.name, holds.rank
    FROM patrons
    JOIN holds ON patrons.id = holds.patron_id
    JOIN books USING (isbn)
    WHERE books.title = 'Advanced Potion-Making'
    ORDER BY holds.rank;

  List all of the library patrons. If they have one or more books checked out, list the books with the patrons.

    SELECT patrons.*, books.*
    FROM patrons
    LEFT JOIN transactions
    ON patrons.id = transactions.patron_id
    LEFT JOIN books USING (isbn)
    ORDER BY patrons.name ASC;